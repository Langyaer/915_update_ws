// Generated by gencpp from file lslidar_ch_msgs/LslidarChScanUnified.msg
// DO NOT EDIT!


#ifndef LSLIDAR_CH_MSGS_MESSAGE_LSLIDARCHSCANUNIFIED_H
#define LSLIDAR_CH_MSGS_MESSAGE_LSLIDARCHSCANUNIFIED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <lslidar_ch_msgs/LslidarChPacket.h>

namespace lslidar_ch_msgs
{
template <class ContainerAllocator>
struct LslidarChScanUnified_
{
  typedef LslidarChScanUnified_<ContainerAllocator> Type;

  LslidarChScanUnified_()
    : header()
    , basetime(0)
    , packets()  {
    }
  LslidarChScanUnified_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , basetime(0)
    , packets(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _basetime_type;
  _basetime_type basetime;

   typedef std::vector< ::lslidar_ch_msgs::LslidarChPacket_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lslidar_ch_msgs::LslidarChPacket_<ContainerAllocator> >::other >  _packets_type;
  _packets_type packets;





  typedef boost::shared_ptr< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> const> ConstPtr;

}; // struct LslidarChScanUnified_

typedef ::lslidar_ch_msgs::LslidarChScanUnified_<std::allocator<void> > LslidarChScanUnified;

typedef boost::shared_ptr< ::lslidar_ch_msgs::LslidarChScanUnified > LslidarChScanUnifiedPtr;
typedef boost::shared_ptr< ::lslidar_ch_msgs::LslidarChScanUnified const> LslidarChScanUnifiedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lslidar_ch_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'lslidar_ch_msgs': ['/home/avenue/Desktop/915_update_ws/src/lslidar_ch_128_20200608_newpub/lslidar_ch_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef8aa3eef1ea793580e2ef69ec4ca588";
  }

  static const char* value(const ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef8aa3eef1ea7935ULL;
  static const uint64_t static_value2 = 0x80e2ef69ec4ca588ULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_ch_msgs/LslidarChScanUnified";
  }

  static const char* value(const ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#lslidar Ch scan packets\n\
\n\
Header           header         #standard ros message header\n\
uint64           basetime       #time to the top of hour\n\
LslidarChPacket[] packets        #vector of raw packets\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: lslidar_ch_msgs/LslidarChPacket\n\
# Raw Leishen LIDAR packet.\n\
\n\
Header header           #standard ros message header\n\
time stamp              # packet timestamp\n\
uint8[1206] data        # packet contents\n\
\n\
";
  }

  static const char* value(const ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.basetime);
      stream.next(m.packets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LslidarChScanUnified_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_ch_msgs::LslidarChScanUnified_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "basetime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.basetime);
    s << indent << "packets[]" << std::endl;
    for (size_t i = 0; i < v.packets.size(); ++i)
    {
      s << indent << "  packets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lslidar_ch_msgs::LslidarChPacket_<ContainerAllocator> >::stream(s, indent + "    ", v.packets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_CH_MSGS_MESSAGE_LSLIDARCHSCANUNIFIED_H
